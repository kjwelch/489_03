#!/usr/bin/env python3
#from __future__ import print_function
import roslib
import sys
import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
from geometry_msgs.msg import Twist



class vehicle:

  # instance variables
  def __init__(self):
    #self.image_pub = rospy.Publisher("new_image_pub",Image,queue_size=10)

    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("camera/image",Image,self.callback)
    self.pub = rospy.Publisher("/cmd_vel", Twist, queue_size = 1)


  def callback(self,data):
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
      # flip 180
      # only on turtlebot3_05S
      print("flipping")
      cv_image = cv2.rotate(cv_image, cv2.ROTATE_180)
      gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
      # Let's rotate the image by 180 degrees
      
    except CvBridgeError as e:
      print(e)

    (rows,cols,channels) = cv_image.shape

    #divide image into thirds
    third = cols//3
    left_view = gray[:, :third]
    mid_view = gray[:, third:third*2]
    right_view = gray[:, third*2:]
    
    left_avg = np.average(left_view)
    right_avg = np.average(right_view)
    print(left_avg,right_avg)

    llw = 0
    lrw = 2
    rrw = 0
    rlw = 2

    t = self.behave(left_avg,right_avg,llw,lrw,rrw,rlw) 
    self.pub.publish(t) # Sending the command        

    # Here's where the circle gets added
    # check out the api: 
    # https://www.geeksforgeeks.org/python-opencv-cv2-circle-method/
#    cv2.circle(cv_image, (50,50), 10, (0,0,255))

    #cv2.imshow("Image window", cv_image)
    cv2.imshow("Grey window", gray)
    cv2.imshow("left", left_view)
    cv2.imshow("right", right_view)
    cv2.waitKey(3)
  
  def behave(self,left_intensity,right_intensity, l_l_w, l_r_w, r_r_w, r_l_w):
    '''
    given intensities of left and right sides of the vehicle as
    well as connection "weights" beween each sensor and each wheel, 
    make robot move
    '''
    #speed_factor = 0.01
    left_speed = left_intensity * l_l_w + right_intensity * r_l_w
    right_speed = right_intensity * r_r_w + left_intensity * l_r_w

    linear_coeff= 0.0001 
    angular_coeff= .005
    linear_speed = linear_coeff*(left_speed + right_speed)
    angular_speed = angular_coeff*(right_speed-left_speed)

    t = Twist()

    t.angular.z = angular_speed
    t.linear.x = linear_speed 
#    print("hello")
    print("linear:", linear_speed, "angular:",angular_speed)
    ## v = (R/2) * (vr + vl)
    ## w = (R/L) (vr - vl) 
    return t



def main(args):
  ic = vehicle()
  rospy.init_node('vehicle', anonymous=True)
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
